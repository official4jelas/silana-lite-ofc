import fetch from 'node-fetch'
import { FormData, Blob } from 'formdata-node'
import { fileTypeFromBuffer } from 'file-type'

let handler = async (m, { command, usedPrefix, conn, text, args }) => {
  let q = m.quoted ? m.quoted : m
  let mime = (q.msg || q).mimetype || ''

  if (!mime) throw `This command is used to transform a human face into a zombie. Please send a clear face image to the bot, then reply to that image using:\n*.tozombie*`

  let media = await q.download()
  const result = await toZombie(media)

  const tag = `@${m.sender.split('@')[0]}`

  return conn.sendMessage(m.chat, {
    image: result,
    caption: `Generated by Silana AI â€“ Follow the creator on Instagram\ninstagram.com/noureddine_ouafy`,
    mentions: [m.sender]
  }, { quoted: m })
}

handler.help = ["tozombie"]
handler.tags = ["tools"]
handler.command = /^(tozombie)$/i
handler.limit = true
handler.owner = false
export default handler

async function toZombie(imageBuffer) {
  try {
    const { ext, mime } = await fileTypeFromBuffer(imageBuffer) || {}
    let form = new FormData()
    const blob = new Blob([imageBuffer.toArrayBuffer()], { type: mime })
    form.append('image', blob, 'image.' + ext)

    const response = await fetch("https://deepgrave-image-processor-no7pxf7mmq-uc.a.run.app/transform_in_place", {
      method: 'POST',
      body: form,
    })

    if (!response.ok) {
      throw new Error("Request failed with status code " + response.status)
    }

    const base64Data = await response.text()
    return Buffer.from(base64Data, 'base64')
  } catch (error) {
    throw error
  }
}
